package results

var templateText = `// Code generated by github.com/tizz98/results; DO NOT EDIT.
package {{.Pkg}}

type {{.ResultName}} struct {
    {{.FieldName}} *{{.T}}
    err error
}

// SetNew{{.ResultName}} is a shortcut to creating a new {{.ResultName}} and then calling .Set(v, err) on it.
func SetNew{{.ResultName}}(v {{.T}}, err error) (result {{.ResultName}}) {
	result.Set(v, err)
	return
}

// SetNew{{.ResultName}}Ptr is a shortcut to creating a new {{.ResultName}} and then calling .Set(v, err) on it.
// This function differs from SetNew{{.ResultName}} by returning a pointer to {{.ResultName}}.
func SetNew{{.ResultName}}Ptr(v {{.T}}, err error) *{{.ResultName}} {
	result := SetNew{{.ResultName}}(v, err)
	return &result
}

// NewOptional{{.ResultName}} is a shortcut to creating a new {{.ResultName}} and then calling .SetOptional(v, err) on it.
func NewOptional{{.ResultName}}(v *{{.T}}, err error) (result {{.ResultName}}) {
	result.SetOptional(v, err)
	return
}

// NewOptional{{.ResultName}}Ptr is a shortcut to creating a new {{.ResultName}} and then calling .SetOptional(v, err) on it.
// This function differs from NewOptional{{.ResultName}} by returning a pointer to {{.ResultName}}.
func NewOptional{{.ResultName}}Ptr(v *{{.T}}, err error) *{{.ResultName}} {
	result := NewOptional{{.ResultName}}(v, err)
	return &result
}

// IsOk returns true when the result contains a non-nil result with no error
func (r {{.ResultName}}) IsOk() bool {
    return r.err == nil
}

// IsErr returns true when the result contains a non-nil error
func (r {{.ResultName}}) IsErr() bool {
    return r.err != nil
}

// Unwrap panics if the result contains an error, otherwise it returns the value
func (r {{.ResultName}}) Unwrap() {{.T}} {
    if r.IsErr() {
        panic("cannot unwrap {{.ResultName}}, it is an error")
    }
    return *r.{{.FieldName}}
}

// UnwrapTo will call the .Err() method on the other Result if this {{.ResultName}} has an error.
// If other is a pointer to a {{.ResultName}}, then .Ok() will be called if this {{.ResultName}} name does not have an error.
func (r {{.ResultName}}) UnwrapTo(other Result) Result {
	if r.IsErr() {
		other.Err(r.GetErr())
	} else if other, ok := other.(*{{.ResultName}}); ok {
		other.Ok(r.Unwrap())
	}

	return other
}

// Expect panics with the specified message if the result contains an error, otherwise it returns the value
func (r {{.ResultName}}) Expect(message string) {{.T}} {
	if r.IsErr() {
		panic(fmt.Errorf("%s: %w", message, r.GetErr()))
	}
	return *r.{{.FieldName}}
}

// Expectf panics with the specified message if the result contains an error, otherwise it returns the value.
// This is different than Expect because if will automatically format the string with the given args.
func (r {{.ResultName}}) Expectf(format string, args ...interface{}) {{.T}} {
	if r.IsErr() {
		panic(fmt.Errorf("%s: %w", fmt.Sprintf(format, args...), r.GetErr()))
	}
	return *r.{{.FieldName}}
}

// UnwrapOr returns the value if there is not an error, otherwise the specified value is returned
func (r {{.ResultName}}) UnwrapOr(v {{.T}}) {{.T}} {
    if r.IsOk() {
        return r.Unwrap()
    }
    return v
}

// UnwrapOrElse returns the value if there is not an error, otherwise the function is called and the result is returned
func (r {{.ResultName}}) UnwrapOrElse(fn func(err error) {{.T}}) {{.T}} {
    if r.IsOk() {
        return r.Unwrap()
    }
    return fn(r.err)
}

// Ok sets the result to a successful result with the provided value.
// This will panic if the result has already been set to successful or an error.
func (r *{{.ResultName}}) Ok(v {{.T}}) {
    r.clear()
    r.{{.FieldName}} = &v
}

// Err sets the result to an error result with the provided error.
// This will panic if the result has already been set to successful or an error.
func (r *{{.ResultName}}) Err(err error) {
    r.clear()
    r.err = err
}

// GetError returns the error of the result. It may be nil, so check with {{.ResultName}}.IsErr() first.
func (r {{.ResultName}}) GetErr() error {
    return r.err
}

// Tup returns a tuple of ({{.T}}, error) with {{.TupDefault}} being returned for {{.T}} if there is an error
func (r {{.ResultName}}) Tup() ({{.T}}, error) {
    return r.UnwrapOr({{.TupDefault}}), r.err
}

// Set is a shortcut to checking the value of an error before setting the result.
// If there is an error, {{.ResultName}}.Err(err) will be called, otherwise {{.ResultName}}.Ok(v) will be called.
func (r *{{.ResultName}}) Set(v {{.T}}, err error) {
	if err != nil {
		r.Err(err)
	} else {
		r.Ok(v)
	}
}

// SetOptional is similar to Set but can be called with a nil value for {{.T}}.
// The error will be checked first to see if it is not nil, then if v is not nil it will be set with .Ok(v).
func (r *{{.ResultName}}) SetOptional(v *{{.T}}, err error) {
	if err != nil {
		r.Err(err)
	} else if v != nil {
		r.Ok(*v)
	}
}

func (r {{.ResultName}}) clear() {
	r.{{.FieldName}} = nil
	r.err = nil
}

// ResultTo{{.ResultName}} takes a Result interface and returns a {{.ResultName}}. If "r" contains a {{.ResultName}},
// it is returned, otherwise a new {{.ResultName}} is returned with an error set.
func ResultTo{{.ResultName}}(r Result) (result {{.ResultName}}) {
	v, ok := r.(*{{.ResultName}})
	if !ok {
		result.Err(fmt.Errorf("expected *{{.ResultName}} got %T", v))
		return
	}

	return *v
}

{{if .GenContext}}
// ContextWith{{.Name}} embeds the given value of {{.T}} into the context for later retrieval with {{.Name}}FromContext
func ContextWith{{.Name}}(ctx context.Context, key interface{}, v {{.T}}) context.Context {
	return context.WithValue(ctx, key, v)
}

// {{.Name}}FromContext attempts to retrieve a {{.T}} value from the specified context. A {{.ResultName}} is returned
// which can be used to inspect the success or failure of retrieval. 
func {{.Name}}FromContext(ctx context.Context, key interface{}) (result {{.ResultName}}) {
	if v, ok := ctx.Value(key).({{.T}}); !ok {
		result.Err(fmt.Errorf("%#v not found in context", key))
	} else {
		result.Ok(v)
	}
	return
}
{{end}}
`
