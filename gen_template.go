package results

var templateText = `// Code generated by github.com/tizz98/results; DO NOT EDIT.
package {{.Pkg}}

type {{.ResultName}} struct {
    {{.FieldName}} *{{.T}}
    err error
}

// IsOk returns true when the result contains a non-nil result with no error
func (r {{.ResultName}}) IsOk() bool {
    return r.err == nil
}

// IsErr returns true when the result contains a non-nil error
func (r {{.ResultName}}) IsErr() bool {
    return r.err != nil
}

// Unwrap panics if the result contains an error, otherwise it returns the value
func (r {{.ResultName}}) Unwrap() {{.T}} {
    if r.IsErr() {
        panic("cannot unwrap {{.ResultName}}, it is an error")
    }
    return *r.{{.FieldName}}
}

// UnwrapOr returns the value if there is not an error, otherwise the specified value is returned
func (r {{.ResultName}}) UnwrapOr(v {{.T}}) {{.T}} {
    if r.IsOk() {
        return r.Unwrap()
    }
    return v
}

// UnwrapOrElse returns the value if there is not an error, otherwise the function is called and the result is returned
func (r {{.ResultName}}) UnwrapOrElse(fn func(err error) {{.T}}) {{.T}} {
    if r.IsOk() {
        return r.Unwrap()
    }
    return fn(r.err)
}

// Ok sets the result to a successful result with the provided value.
// This will panic if the result has already been set to successful or an error.
func (r *{{.ResultName}}) Ok(v {{.T}}) {
    r.checkAbilityToSet()
    r.{{.FieldName}} = &v
}

// Err sets the result to an error result with the provided error.
// This will panic if the result has already been set to successful or an error.
func (r *{{.ResultName}}) Err(err error) {
    r.checkAbilityToSet()
    r.err = err
}

// GetError returns the error of the result. It may be nil, so check with {{.ResultName}}.IsErr() first.
func (r {{.ResultName}}) GetErr() error {
    return r.err
}

// Tup returns a tuple of ({{.T}}, error) with {{.TupDefault}} being returned for {{.T}} if there is an error
func (r {{.ResultName}}) Tup() ({{.T}}, error) {
    return r.UnwrapOr({{.TupDefault}}), r.err
}

func (r {{.ResultName}}) checkAbilityToSet() {
    if r.isSet() {
        panic("{{.ResultName}} is already set, cannot set again")
    }
}

func (r {{.ResultName}}) isSet() bool {
    return r.{{.FieldName}} != nil || r.err != nil
}
`
