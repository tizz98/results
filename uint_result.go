// Code generated by github.com/tizz98/results; DO NOT EDIT.
package results

import (
	"context"
	"fmt"
)

type UintResult struct {
	value *uint
	err   error
}

// IsOk returns true when the result contains a non-nil result with no error
func (r UintResult) IsOk() bool {
	return r.err == nil
}

// IsErr returns true when the result contains a non-nil error
func (r UintResult) IsErr() bool {
	return r.err != nil
}

// Unwrap panics if the result contains an error, otherwise it returns the value
func (r UintResult) Unwrap() uint {
	if r.IsErr() {
		panic("cannot unwrap UintResult, it is an error")
	}
	return *r.value
}

// UnwrapOr returns the value if there is not an error, otherwise the specified value is returned
func (r UintResult) UnwrapOr(v uint) uint {
	if r.IsOk() {
		return r.Unwrap()
	}
	return v
}

// UnwrapOrElse returns the value if there is not an error, otherwise the function is called and the result is returned
func (r UintResult) UnwrapOrElse(fn func(err error) uint) uint {
	if r.IsOk() {
		return r.Unwrap()
	}
	return fn(r.err)
}

// Ok sets the result to a successful result with the provided value.
// This will panic if the result has already been set to successful or an error.
func (r *UintResult) Ok(v uint) {
	r.checkAbilityToSet()
	r.value = &v
}

// Err sets the result to an error result with the provided error.
// This will panic if the result has already been set to successful or an error.
func (r *UintResult) Err(err error) {
	r.checkAbilityToSet()
	r.err = err
}

// GetError returns the error of the result. It may be nil, so check with UintResult.IsErr() first.
func (r UintResult) GetErr() error {
	return r.err
}

// Tup returns a tuple of (uint, error) with 0 being returned for uint if there is an error
func (r UintResult) Tup() (uint, error) {
	return r.UnwrapOr(0), r.err
}

// Set is a shortcut to checking the value of an error before setting the result.
// If there is an error, UintResult.Err(err) will be called, otherwise UintResult.Ok(v) will be called.
func (r *UintResult) Set(v uint, err error) {
	if err != nil {
		r.Err(err)
		return
	}

	r.Ok(v)
}

func (r UintResult) checkAbilityToSet() {
	if r.isSet() {
		panic("UintResult is already set, cannot set again")
	}
}

func (r UintResult) isSet() bool {
	return r.value != nil || r.err != nil
}

func ContextWithUint(ctx context.Context, key interface{}, v uint) context.Context {
	return context.WithValue(ctx, key, v)
}

func UintFromContext(ctx context.Context, key interface{}) (result UintResult) {
	if v, ok := ctx.Value(key).(uint); !ok {
		result.Err(fmt.Errorf("%#v not found in context", key))
	} else {
		result.Ok(v)
	}
	return
}
