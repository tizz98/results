// Code generated by github.com/tizz98/results; DO NOT EDIT.
package results

type ByteSliceResult struct {
    value *[]byte
    err error
}

func (r *ByteSliceResult) IsOk() bool {
    return r.err == nil
}

func (r *ByteSliceResult) IsErr() bool {
    return r.err != nil
}

func (r *ByteSliceResult) Unwrap() []byte {
    if r.IsErr() {
        panic("cannot unwrap ByteSliceResult, it is an error")
    }
    return *r.value
}

func (r *ByteSliceResult) UnwrapOr(v []byte) []byte {
    if r.IsOk() {
        return r.Unwrap()
    }
    return v
}

func (r *ByteSliceResult) UnwrapOrElse(fn func(err error) []byte) []byte {
    if r.IsOk() {
        return r.Unwrap()
    }
    return fn(r.err)
}

func (r *ByteSliceResult) Ok(v []byte) {
    r.checkAbilityToSet()
    r.value = &v
}

func (r *ByteSliceResult) Err(err error) {
    r.checkAbilityToSet()
    r.err = err
}

func (r *ByteSliceResult) GetErr() error {
    return r.err
}

func (r *ByteSliceResult) Tup() ([]byte, error) {
    return r.UnwrapOr(nil), r.err
}

func (r *ByteSliceResult) checkAbilityToSet() {
    if r.isSet() {
        panic("ByteSliceResult is already set, cannot set again")
    }
}

func (r *ByteSliceResult) isSet() bool {
    return r.value != nil || r.err != nil
}
