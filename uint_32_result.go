// Code generated by github.com/tizz98/results; DO NOT EDIT.
package results

import (
	"context"
	"fmt"
)

type Uint32Result struct {
	value *uint32
	err   error
}

// SetNewUint32Result is a shortcut to creating a new Uint32Result and then calling .Set(v, err) on it.
func SetNewUint32Result(v uint32, err error) (result Uint32Result) {
	result.Set(v, err)
	return
}

// SetNewUint32ResultPtr is a shortcut to creating a new Uint32Result and then calling .Set(v, err) on it.
// This function differs from SetNewUint32Result by returning a pointer to Uint32Result.
func SetNewUint32ResultPtr(v uint32, err error) *Uint32Result {
	result := SetNewUint32Result(v, err)
	return &result
}

// NewOptionalUint32Result is a shortcut to creating a new Uint32Result and then calling .SetOptional(v, err) on it.
func NewOptionalUint32Result(v *uint32, err error) (result Uint32Result) {
	result.SetOptional(v, err)
	return
}

// NewOptionalUint32ResultPtr is a shortcut to creating a new Uint32Result and then calling .SetOptional(v, err) on it.
// This function differs from NewOptionalUint32Result by returning a pointer to Uint32Result.
func NewOptionalUint32ResultPtr(v *uint32, err error) *Uint32Result {
	result := NewOptionalUint32Result(v, err)
	return &result
}

// IsOk returns true when the result contains a non-nil result with no error
func (r Uint32Result) IsOk() bool {
	return r.err == nil
}

// IsErr returns true when the result contains a non-nil error
func (r Uint32Result) IsErr() bool {
	return r.err != nil
}

// Unwrap panics if the result contains an error, otherwise it returns the value
func (r Uint32Result) Unwrap() uint32 {
	if r.IsErr() {
		panic("cannot unwrap Uint32Result, it is an error")
	}
	return *r.value
}

// UnwrapTo will call the .Err() method on the other Result if this Uint32Result has an error.
// If other is a pointer to a Uint32Result, then .Ok() will be called if this Uint32Result name does not have an error.
func (r Uint32Result) UnwrapTo(other Result) Result {
	if r.IsErr() {
		other.Err(r.GetErr())
	} else if other, ok := other.(*Uint32Result); ok {
		other.Ok(r.Unwrap())
	}

	return other
}

// Expect panics with the specified message if the result contains an error, otherwise it returns the value
func (r Uint32Result) Expect(message string) uint32 {
	if r.IsErr() {
		panic(fmt.Errorf("%s: %w", message, r.GetErr()))
	}
	return *r.value
}

// Expectf panics with the specified message if the result contains an error, otherwise it returns the value.
// This is different than Expect because if will automatically format the string with the given args.
func (r Uint32Result) Expectf(format string, args ...interface{}) uint32 {
	if r.IsErr() {
		panic(fmt.Errorf("%s: %w", fmt.Sprintf(format, args...), r.GetErr()))
	}
	return *r.value
}

// UnwrapOr returns the value if there is not an error, otherwise the specified value is returned
func (r Uint32Result) UnwrapOr(v uint32) uint32 {
	if r.IsOk() {
		return r.Unwrap()
	}
	return v
}

// UnwrapOrElse returns the value if there is not an error, otherwise the function is called and the result is returned
func (r Uint32Result) UnwrapOrElse(fn func(err error) uint32) uint32 {
	if r.IsOk() {
		return r.Unwrap()
	}
	return fn(r.err)
}

// Ok sets the result to a successful result with the provided value.
// This will panic if the result has already been set to successful or an error.
func (r *Uint32Result) Ok(v uint32) {
	r.clear()
	r.value = &v
}

// Err sets the result to an error result with the provided error.
// This will panic if the result has already been set to successful or an error.
func (r *Uint32Result) Err(err error) {
	r.clear()
	r.err = err
}

// GetError returns the error of the result. It may be nil, so check with Uint32Result.IsErr() first.
func (r Uint32Result) GetErr() error {
	return r.err
}

// Tup returns a tuple of (uint32, error) with 0 being returned for uint32 if there is an error
func (r Uint32Result) Tup() (uint32, error) {
	return r.UnwrapOr(0), r.err
}

// Set is a shortcut to checking the value of an error before setting the result.
// If there is an error, Uint32Result.Err(err) will be called, otherwise Uint32Result.Ok(v) will be called.
func (r *Uint32Result) Set(v uint32, err error) {
	if err != nil {
		r.Err(err)
	} else {
		r.Ok(v)
	}
}

// SetOptional is similar to Set but can be called with a nil value for uint32.
// The error will be checked first to see if it is not nil, then if v is not nil it will be set with .Ok(v).
func (r *Uint32Result) SetOptional(v *uint32, err error) {
	if err != nil {
		r.Err(err)
	} else if v != nil {
		r.Ok(*v)
	}
}

// Ptr returns a pointer to the Uint32Result
func (r Uint32Result) Ptr() *Uint32Result { return &r }

func (r Uint32Result) clear() {
	r.value = nil
	r.err = nil
}

// ResultToUint32Result takes a Result interface and returns a Uint32Result. If "r" contains a Uint32Result,
// it is returned, otherwise a new Uint32Result is returned with an error set.
func ResultToUint32Result(r Result) (result Uint32Result) {
	v, ok := r.(*Uint32Result)
	if !ok {
		result.Err(fmt.Errorf("expected *Uint32Result got %T", v))
		return
	}

	return *v
}

// ContextWithUint32 embeds the given value of uint32 into the context for later retrieval with Uint32FromContext
func ContextWithUint32(ctx context.Context, key interface{}, v uint32) context.Context {
	return context.WithValue(ctx, key, v)
}

// Uint32FromContext attempts to retrieve a uint32 value from the specified context. A Uint32Result is returned
// which can be used to inspect the success or failure of retrieval.
func Uint32FromContext(ctx context.Context, key interface{}) (result Uint32Result) {
	if v, ok := ctx.Value(key).(uint32); !ok {
		result.Err(fmt.Errorf("%#v not found in context", key))
	} else {
		result.Ok(v)
	}
	return
}
