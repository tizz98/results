// Code generated by github.com/tizz98/results; DO NOT EDIT.
package results

type Float32Result struct {
    value *float32
    err error
}

// IsOk returns true when the result contains a non-nil result with no error
func (r Float32Result) IsOk() bool {
    return r.err == nil
}

// IsErr returns true when the result contains a non-nil error
func (r Float32Result) IsErr() bool {
    return r.err != nil
}

// Unwrap panics if the result contains an error, otherwise it returns the value
func (r Float32Result) Unwrap() float32 {
    if r.IsErr() {
        panic("cannot unwrap Float32Result, it is an error")
    }
    return *r.value
}

// UnwrapOr returns the value if there is not an error, otherwise the specified value is returned
func (r Float32Result) UnwrapOr(v float32) float32 {
    if r.IsOk() {
        return r.Unwrap()
    }
    return v
}

// UnwrapOrElse returns the value if there is not an error, otherwise the function is called and the result is returned
func (r Float32Result) UnwrapOrElse(fn func(err error) float32) float32 {
    if r.IsOk() {
        return r.Unwrap()
    }
    return fn(r.err)
}

// Ok sets the result to a successful result with the provided value.
// This will panic if the result has already been set to successful or an error.
func (r *Float32Result) Ok(v float32) {
    r.checkAbilityToSet()
    r.value = &v
}

// Err sets the result to an error result with the provided error.
// This will panic if the result has already been set to successful or an error.
func (r *Float32Result) Err(err error) {
    r.checkAbilityToSet()
    r.err = err
}

// GetError returns the error of the result. It may be nil, so check with Float32Result.IsErr() first.
func (r Float32Result) GetErr() error {
    return r.err
}

// Tup returns a tuple of (float32, error) with 0 being returned for float32 if there is an error
func (r Float32Result) Tup() (float32, error) {
    return r.UnwrapOr(0), r.err
}

func (r Float32Result) checkAbilityToSet() {
    if r.isSet() {
        panic("Float32Result is already set, cannot set again")
    }
}

func (r Float32Result) isSet() bool {
    return r.value != nil || r.err != nil
}
